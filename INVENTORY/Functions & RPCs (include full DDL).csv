schema_name,function_name,arguments,return_type,language,kind,volatility,security_definer,function_ddl
app2,handle_new_user,,trigger,plpgsql,function,volatile,true,"CREATE OR REPLACE FUNCTION app2.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'app2, public, auth'
AS $function$
BEGIN
  -- Insert a minimal profile record for the new user
  -- Use ON CONFLICT to handle duplicates gracefully
  INSERT INTO app2.profiles (
    user_id,
    first_name,
    last_name,
    date_of_birth,
    height_cm,
    weight_kg,
    locale
  ) VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'first_name', 'User'),
    COALESCE(NEW.raw_user_meta_data->>'last_name', ''),
    COALESCE((NEW.raw_user_meta_data->>'date_of_birth')::date, '1990-01-01'::date),
    COALESCE((NEW.raw_user_meta_data->>'height_cm')::numeric, 170.0),
    COALESCE((NEW.raw_user_meta_data->>'weight_kg')::numeric, 70.0),
    COALESCE(NEW.raw_user_meta_data->>'locale', 'en')
  )
  ON CONFLICT (user_id) DO NOTHING;
  
  RETURN NEW;
END;
$function$
"
app2,rpc_get_exercise_by_id,"p_exercise_id uuid, lang text",app2.v_exercise_library_localized,sql,function,stable,false,"CREATE OR REPLACE FUNCTION app2.rpc_get_exercise_by_id(p_exercise_id uuid, lang text DEFAULT 'en'::text)
 RETURNS app2.v_exercise_library_localized
 LANGUAGE sql
 STABLE
AS $function$
  select set_config('app.locale', case when lang in ('en','pt-BR') then lang else 'en' end, true);
  select v.*
  from app2.v_exercise_library_localized v
  where v.exercise_id = p_exercise_id;
$function$
"
app2,rpc_get_exercise_library,lang text,SETOF app2.v_exercise_library_localized,sql,function,stable,false,"CREATE OR REPLACE FUNCTION app2.rpc_get_exercise_library(lang text DEFAULT 'en'::text)
 RETURNS SETOF app2.v_exercise_library_localized
 LANGUAGE sql
 STABLE
AS $function$
  select set_config('app.locale', case when lang in ('en','pt-BR') then lang else 'en' end, true);
  select * from app2.v_exercise_library_localized;
$function$
"
app2,rpc_get_exercise_variants,lang text,SETOF app2.v_exercise_variants_localized,sql,function,stable,false,"CREATE OR REPLACE FUNCTION app2.rpc_get_exercise_variants(lang text DEFAULT 'en'::text)
 RETURNS SETOF app2.v_exercise_variants_localized
 LANGUAGE sql
 STABLE
AS $function$
  select set_config('app.locale', case when lang in ('en','pt-BR') then lang else 'en' end, true);
  select * from app2.v_exercise_variants_localized;
$function$
"
app2,rpc_get_variants_for_exercise,"p_exercise_id uuid, lang text",SETOF app2.v_exercise_variants_localized,sql,function,stable,false,"CREATE OR REPLACE FUNCTION app2.rpc_get_variants_for_exercise(p_exercise_id uuid, lang text DEFAULT 'en'::text)
 RETURNS SETOF app2.v_exercise_variants_localized
 LANGUAGE sql
 STABLE
AS $function$
  select set_config('app.locale', case when lang in ('en','pt-BR') then lang else 'en' end, true);
  select v.*
  from app2.v_exercise_variants_localized v
  where v.exercise_id = p_exercise_id
  order by v.name;
$function$
"
app2,rpc_search_exercises,"q text, lang text, p_category text, p_equipment text[]",SETOF app2.v_exercise_library_localized,sql,function,stable,false,"CREATE OR REPLACE FUNCTION app2.rpc_search_exercises(q text, lang text DEFAULT 'en'::text, p_category text DEFAULT NULL::text, p_equipment text[] DEFAULT NULL::text[])
 RETURNS SETOF app2.v_exercise_library_localized
 LANGUAGE sql
 STABLE
AS $function$
  with _lang as (
    select case when $2 in ('en','pt-BR') then $2 else 'en' end as lang
  ),
  localized as (
    -- pick localized row for desired lang or EN (for search vector & name)
    select el.id,
           coalesce(li.name, len.name, el.name) as search_name,
           coalesce(li.search_tsv, len.search_tsv, to_tsvector('simple', coalesce(el.name,'') || ' ' || coalesce(el.description,''))) as tsv,
           el.category,
           el.equipment
    from preserve.exercise_library el
    left join _lang l on true
    left join preserve.exercise_library_i18n li
      on li.exercise_id = el.id and li.locale = l.lang
    left join preserve.exercise_library_i18n len
      on len.exercise_id = el.id and len.locale = 'en'
  )
  select v.*
  from app2.v_exercise_library_localized v
  join _lang l on true
  join localized s on s.id = v.exercise_id
  where (
          ($1 is null) OR
          s.tsv @@ plainto_tsquery('simple', $1) OR
          s.search_name ilike ('%'||$1||'%')
        )
    and (p_category is null or v.category = p_category)
    and (p_equipment is null or (v.equipment && p_equipment))
  order by v.name
  ;
$function$
"
app2,set_updated_at,,trigger,plpgsql,function,volatile,false,"CREATE OR REPLACE FUNCTION app2.set_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$function$
"
app2,touch_updated_at,,trigger,plpgsql,function,volatile,false,"CREATE OR REPLACE FUNCTION app2.touch_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin new.updated_at = now(); return new; end $function$
"